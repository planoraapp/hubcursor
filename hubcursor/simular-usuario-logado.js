// üé≠ Script para Simular Usu√°rio Logado no HubCursor
// Execute este script no console do navegador para simular um usu√°rio logado

// ===== CONFIGURA√á√ïES =====
const USUARIO_SIMULADO = {
  id: "simulacao-123",
  habbo_username: "TesteUsuario",
  habbo_motto: "Testando o HubCursor!",
  habbo_avatar: "https://www.habbo.com.br/habbo-imaging/avatarimage?user=TesteUsuario&size=s&direction=2&head_direction=3&headonly=1",
  created_at: new Date().toISOString()
};

// ===== FUN√á√ïES DE SIMULA√á√ÉO =====

// 1. Simular Login
function simularLogin() {
  console.log("üîê Simulando login do usu√°rio:", USUARIO_SIMULADO.habbo_username);
  
  // Salvar no localStorage (como o sistema real faz)
  localStorage.setItem('habboUser', JSON.stringify(USUARIO_SIMULADO));
  
  // Disparar evento customizado para notificar mudan√ßas
  window.dispatchEvent(new CustomEvent('habboUserLogin', { 
    detail: USUARIO_SIMULADO 
  }));
  
  console.log("‚úÖ Usu√°rio simulado logado com sucesso!");
  console.log("üîÑ Recarregue a p√°gina para ver as mudan√ßas na interface");
  
  return USUARIO_SIMULADO;
}

// 2. Simular Logout
function simularLogout() {
  console.log("üö™ Simulando logout do usu√°rio");
  
  // Remover do localStorage
  localStorage.removeItem('habboUser');
  
  // Disparar evento customizado
  window.dispatchEvent(new CustomEvent('habboUserLogout'));
  
  console.log("‚úÖ Usu√°rio simulado desconectado!");
  console.log("üîÑ Recarregue a p√°gina para ver as mudan√ßas na interface");
}

// 3. Verificar Status Atual
function verificarStatus() {
  const usuario = localStorage.getItem('habboUser');
  if (usuario) {
    const userData = JSON.parse(usuario);
    console.log("üë§ Usu√°rio atualmente logado:", userData);
    return userData;
  } else {
    console.log("‚ùå Nenhum usu√°rio logado");
    return null;
  }
}

// 4. Simular Diferentes Tipos de Usu√°rio
function simularUsuarioAdmin() {
  const adminUser = {
    ...USUARIO_SIMULADO,
    habbo_username: "AdminTeste",
    is_admin: true
  };
  
  localStorage.setItem('habboUser', JSON.stringify(adminUser));
  console.log("üëë Usu√°rio admin simulado logado:", adminUser.habbo_username);
  return adminUser;
}

function simularUsuarioNormal() {
  const normalUser = {
    ...USUARIO_SIMULADO,
    habbo_username: "UsuarioNormal",
    is_admin: false
  };
  
  localStorage.setItem('habboUser', JSON.stringify(normalUser));
  console.log("üë§ Usu√°rio normal simulado logado:", normalUser.habbo_username);
  return normalUser;
}

// 5. Testar Funcionalidades Espec√≠ficas
function testarFuncionalidades() {
  const usuario = verificarStatus();
  if (!usuario) {
    console.log("‚ùå Fa√ßa login primeiro usando simularLogin()");
    return;
  }
  
  console.log("üß™ Testando funcionalidades para usu√°rio logado:");
  console.log("1. Sidebar deve mostrar avatar e nome do usu√°rio");
  console.log("2. Bot√£o de logout deve estar vis√≠vel");
  console.log("3. Algumas p√°ginas podem ter conte√∫do adicional");
  console.log("4. Console pode ter funcionalidades extras");
}

// ===== INSTRU√á√ïES DE USO =====
console.log(`
üé≠ SIMULADOR DE USU√ÅRIO LOGADO - HubCursor

üìã FUN√á√ïES DISPON√çVEIS:
‚Ä¢ simularLogin() - Simula login de usu√°rio normal
‚Ä¢ simularUsuarioAdmin() - Simula login de usu√°rio admin
‚Ä¢ simularUsuarioNormal() - Simula login de usu√°rio normal
‚Ä¢ simularLogout() - Simula logout
‚Ä¢ verificarStatus() - Verifica status atual
‚Ä¢ testarFuncionalidades() - Testa funcionalidades dispon√≠veis

üöÄ COMO USAR:
1. Execute: simularLogin()
2. Recarregue a p√°gina (F5)
3. Observe as mudan√ßas na interface
4. Use simularLogout() para voltar ao estado normal

üí° DICA: Execute testarFuncionalidades() ap√≥s fazer login para ver o que mudou!
`);

// ===== EXPORTA√á√ÉO DAS FUN√á√ïES =====
window.simularUsuarioLogado = {
  simularLogin,
  simularLogout,
  verificarStatus,
  simularUsuarioAdmin,
  simularUsuarioNormal,
  testarFuncionalidades,
  USUARIO_SIMULADO
};

console.log("üéâ Simulador carregado! Use window.simularUsuarioLogado para acessar as fun√ß√µes.");
