const fs = require('fs');
const path = require('path');

// Script para investigar todas as anima√ß√µes dispon√≠veis
console.log('üîç Investigando todas as anima√ß√µes dispon√≠veis...');

const petsSpritesDir = './public/assets/pets-sprites';
const mainPets = ['monkey', 'dog', 'cat', 'bear', 'dragon'];

// Fun√ß√£o para investigar todas as anima√ß√µes de um pet
function investigateAllAnimations(petName) {
    const petDir = path.join(petsSpritesDir, petName);
    
    if (!fs.existsSync(petDir)) {
        console.log(`‚ùå Pasta do pet ${petName} n√£o encontrada`);
        return;
    }
    
    const files = fs.readdirSync(petDir);
    const pngFiles = files.filter(file => file.endsWith('.png'));
    
    console.log(`\nüêæ Investigando ${petName} - todas as anima√ß√µes (${pngFiles.length} sprites encontrados)`);
    
    // Agrupar por anima√ß√£o
    const animations = {};
    
    pngFiles.forEach(file => {
        // Padr√£o: pet_SIZE_a_DIRECTION_ANIMATION.png
        const match = file.match(new RegExp(`${petName}_64_a_(\\d+)_(\\d+)\\.png`));
        if (match) {
            const direction = parseInt(match[1]);
            const animation = match[2];
            
            if (!animations[animation]) {
                animations[animation] = {
                    directions: new Set(),
                    files: [],
                    totalSize: 0
                };
            }
            
            animations[animation].directions.add(direction);
            animations[animation].files.push(file);
            
            // Calcular tamanho total
            const filePath = path.join(petDir, file);
            const stats = fs.statSync(filePath);
            animations[animation].totalSize += stats.size;
        }
    });
    
    // Mostrar anima√ß√µes ordenadas por n√∫mero de dire√ß√µes
    const sortedAnimations = Object.keys(animations).sort((a, b) => {
        const aDirections = animations[a].directions.size;
        const bDirections = animations[b].directions.size;
        if (aDirections !== bDirections) {
            return bDirections - aDirections; // Mais dire√ß√µes primeiro
        }
        // Se mesmo n√∫mero de dire√ß√µes, ordenar por tamanho m√©dio
        const aAvgSize = animations[a].totalSize / animations[a].files.length;
        const bAvgSize = animations[b].totalSize / animations[b].files.length;
        return bAvgSize - aAvgSize;
    });
    
    console.log(`üìä Anima√ß√µes encontradas: ${sortedAnimations.length}`);
    
    // Mostrar as melhores anima√ß√µes
    sortedAnimations.slice(0, 10).forEach(animation => {
        const anim = animations[animation];
        const directions = Array.from(anim.directions).sort();
        const avgSizeKB = Math.round(anim.totalSize / anim.files.length / 1024);
        
        console.log(`  üé¨ Anima√ß√£o ${animation}: ${anim.directions.size} dire√ß√µes [${directions.join(', ')}] - ${avgSizeKB}KB m√©dio`);
        
        // Mostrar dire√ß√µes espec√≠ficas se tiver muitas
        if (anim.directions.size >= 5) {
            console.log(`    ‚úÖ Boa candidata! Tem dire√ß√µes: ${directions.join(', ')}`);
        }
    });
    
    // Procurar por anima√ß√µes com dire√ß√µes espec√≠ficas (0-7)
    console.log(`\nüîç Procurando anima√ß√µes com dire√ß√µes espec√≠ficas para ${petName}:`);
    
    const targetDirections = [0, 1, 2, 3, 4, 5, 6, 7];
    
    sortedAnimations.forEach(animation => {
        const anim = animations[animation];
        const directions = Array.from(anim.directions);
        
        // Verificar se tem muitas dire√ß√µes do target
        const matchingDirections = targetDirections.filter(d => anim.directions.has(d));
        
        if (matchingDirections.length >= 5) {
            console.log(`  üéØ Anima√ß√£o ${animation}: ${matchingDirections.length}/8 dire√ß√µes [${matchingDirections.join(', ')}]`);
        }
    });
    
    return animations;
}

// Investigar todos os pets
const allAnimations = {};
mainPets.forEach(petName => {
    const animations = investigateAllAnimations(petName);
    if (animations) {
        allAnimations[petName] = animations;
    }
});

console.log('\nüîç Investiga√ß√£o conclu√≠da!');
console.log('\nüí° Resumo das melhores anima√ß√µes:');

mainPets.forEach(petName => {
    if (allAnimations[petName]) {
        const animations = allAnimations[petName];
        const sortedAnimations = Object.keys(animations).sort((a, b) => {
            return animations[b].directions.size - animations[a].directions.size;
        });
        
        const bestAnimation = sortedAnimations[0];
        const bestAnim = animations[bestAnimation];
        const directions = Array.from(bestAnim.directions).sort();
        
        console.log(`üêæ ${petName}: Anima√ß√£o ${bestAnimation} com ${bestAnim.directions.size} dire√ß√µes [${directions.join(', ')}]`);
    }
});

console.log('\nüìã Pr√≥ximos passos:');
console.log('1. Escolher as melhores anima√ß√µes para cada pet');
console.log('2. Organizar sprites com as anima√ß√µes escolhidas');
console.log('3. Atualizar o Tamagotchi para usar as melhores anima√ß√µes');
