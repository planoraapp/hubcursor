# Script Automatico para Configurar HabboHub
# Este script baixa o projeto do GitHub e configura tudo automaticamente

Write-Host "Iniciando configuracao automatica do HabboHub..." -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan

# Definir caminhos
$documentsPath = [Environment]::GetFolderPath("MyDocuments")
$projectPath = Join-Path $documentsPath "HabboHub"
$backupPath = Join-Path $documentsPath "HabboHub-Backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"

Write-Host "üìÅ Pasta de destino: $projectPath" -ForegroundColor Yellow

# Verificar se Git est√° instalado
Write-Host "üîç Verificando se Git est√° instalado..." -ForegroundColor Blue
try {
    $gitVersion = git --version
    Write-Host "‚úÖ Git encontrado: $gitVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Git n√£o encontrado! Instalando..." -ForegroundColor Red
    Write-Host "Por favor, instale o Git primeiro: https://git-scm.com/download/win" -ForegroundColor Yellow
    Read-Host "Pressione Enter ap√≥s instalar o Git"
}

# Verificar se Node.js est√° instalado
Write-Host "üîç Verificando se Node.js est√° instalado..." -ForegroundColor Blue
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js encontrado: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js n√£o encontrado! Instalando..." -ForegroundColor Red
    Write-Host "Por favor, instale o Node.js primeiro: https://nodejs.org/" -ForegroundColor Yellow
    Read-Host "Pressione Enter ap√≥s instalar o Node.js"
}

# Criar pasta de backup se o projeto j√° existir
if (Test-Path $projectPath) {
    Write-Host "üì¶ Projeto j√° existe! Criando backup..." -ForegroundColor Yellow
    Move-Item $projectPath $backupPath
    Write-Host "‚úÖ Backup criado em: $backupPath" -ForegroundColor Green
}

# Criar pasta do projeto
Write-Host "üìÅ Criando pasta do projeto..." -ForegroundColor Blue
New-Item -ItemType Directory -Path $projectPath -Force | Out-Null

# Navegar para a pasta
Set-Location $projectPath

# Clonar reposit√≥rio
Write-Host "üì• Baixando projeto do GitHub..." -ForegroundColor Blue
try {
    git clone https://github.com/planoraapp/hubcursor.git .
    Write-Host "‚úÖ Projeto baixado com sucesso!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao baixar o projeto: $_" -ForegroundColor Red
    Read-Host "Pressione Enter para continuar"
}

# Instalar depend√™ncias
Write-Host "üì¶ Instalando depend√™ncias..." -ForegroundColor Blue
try {
    npm install
    Write-Host "‚úÖ Depend√™ncias instaladas com sucesso!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao instalar depend√™ncias: $_" -ForegroundColor Red
    Write-Host "Tentando com --force..." -ForegroundColor Yellow
    npm install --force
}

# Criar arquivo .env
Write-Host "‚öôÔ∏è Criando arquivo de configura√ß√£o..." -ForegroundColor Blue
$envContent = @"
# Supabase Configuration
VITE_SUPABASE_URL=your_supabase_url_here
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key_here

# Habbo API Configuration
VITE_HABBO_API_BASE_URL=https://www.habbo.com.br
VITE_HABBO_FIGUREDATA_URL=https://www.habbo.com.br/gamedata/figuredata

# Development
VITE_APP_ENV=development
"@

$envContent | Out-File -FilePath ".env" -Encoding UTF8
Write-Host "‚úÖ Arquivo .env criado!" -ForegroundColor Green

# Criar scripts de automa√ß√£o
Write-Host "üîß Criando scripts de automa√ß√£o..." -ForegroundColor Blue

# Script para sincronizar com GitHub
$syncScript = @"
# Script para sincronizar mudan√ßas com o GitHub
Write-Host "üîÑ Sincronizando com GitHub..." -ForegroundColor Green

# Verificar se h√° mudan√ßas
`$changes = git status --porcelain
if (`$changes) {
    # Adicionar todas as mudan√ßas
    git add .
    
    # Fazer commit com mensagem
    `$commitMessage = Read-Host "Digite a mensagem do commit"
    if (`$commitMessage) {
        git commit -m `$commitMessage
        
        # Enviar para o GitHub
        git push origin main
        
        Write-Host "‚úÖ Sincroniza√ß√£o conclu√≠da!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Commit cancelado!" -ForegroundColor Red
    }
} else {
    Write-Host "‚ÑπÔ∏è Nenhuma mudan√ßa para sincronizar!" -ForegroundColor Yellow
}
"@

$syncScript | Out-File -FilePath "sync-to-github.ps1" -Encoding UTF8

# Script para baixar atualiza√ß√µes
$pullScript = @"
# Script para baixar atualiza√ß√µes do GitHub
Write-Host "üì• Baixando atualiza√ß√µes do GitHub..." -ForegroundColor Blue

try {
    # Baixar mudan√ßas
    git pull origin main
    
    # Reinstalar depend√™ncias se package.json mudou
    `$packageChanged = git diff HEAD~1 HEAD --name-only | Select-String "package.json"
    if (`$packageChanged) {
        Write-Host "üì¶ Reinstalando depend√™ncias..." -ForegroundColor Yellow
        npm install
    }
    
    Write-Host "‚úÖ Atualiza√ß√µes baixadas!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao baixar atualiza√ß√µes: `$_" -ForegroundColor Red
}
"@

$pullScript | Out-File -FilePath "pull-from-github.ps1" -Encoding UTF8

# Script para iniciar desenvolvimento
$startScript = @"
# Script para iniciar desenvolvimento
Write-Host "üöÄ Iniciando HabboHub..." -ForegroundColor Cyan

# Verificar se node_modules existe
if (!(Test-Path "node_modules")) {
    Write-Host "üì¶ Instalando depend√™ncias..." -ForegroundColor Yellow
    npm install
}

# Verificar se .env existe
if (!(Test-Path ".env")) {
    Write-Host "‚ö†Ô∏è Arquivo .env n√£o encontrado! Criando..." -ForegroundColor Yellow
    @"
# Supabase Configuration
VITE_SUPABASE_URL=your_supabase_url_here
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key_here

# Habbo API Configuration
VITE_HABBO_API_BASE_URL=https://www.habbo.com.br
VITE_HABBO_FIGUREDATA_URL=https://www.habbo.com.br/gamedata/figuredata

# Development
VITE_APP_ENV=development
"@ | Out-File -FilePath ".env" -Encoding UTF8
}

# Iniciar servidor de desenvolvimento
Write-Host "üåê Abrindo http://localhost:5173..." -ForegroundColor Green
npm run dev
"@

$startScript | Out-File -FilePath "start-dev.ps1" -Encoding UTF8

# Script para build de produ√ß√£o
$buildScript = @"
# Script para build de produ√ß√£o
Write-Host "üèóÔ∏è Fazendo build de produ√ß√£o..." -ForegroundColor Blue

try {
    npm run build
    Write-Host "‚úÖ Build conclu√≠do! Arquivos em ./dist/" -ForegroundColor Green
    Write-Host "üìÅ Para testar o build: npm run preview" -ForegroundColor Yellow
} catch {
    Write-Host "‚ùå Erro no build: `$_" -ForegroundColor Red
}
"@

$buildScript | Out-File -FilePath "build-production.ps1" -Encoding UTF8

Write-Host "‚úÖ Scripts de automa√ß√£o criados!" -ForegroundColor Green

# Criar atalho na √°rea de trabalho
Write-Host "üîó Criando atalho na √°rea de trabalho..." -ForegroundColor Blue
$desktopPath = [Environment]::GetFolderPath("Desktop")
$shortcutPath = Join-Path $desktopPath "HabboHub.lnk"

$WshShell = New-Object -comObject WScript.Shell
$Shortcut = $WshShell.CreateShortcut($shortcutPath)
$Shortcut.TargetPath = "powershell.exe"
$Shortcut.Arguments = "-NoExit -Command `"cd '$projectPath'; .\start-dev.ps1`""
$Shortcut.WorkingDirectory = $projectPath
$Shortcut.Description = "Iniciar HabboHub"
$Shortcut.Save()

Write-Host "‚úÖ Atalho criado na √°rea de trabalho!" -ForegroundColor Green

# Mostrar resumo
Write-Host ""
Write-Host "üéâ CONFIGURA√á√ÉO CONCLU√çDA!" -ForegroundColor Green
Write-Host "=================================================" -ForegroundColor Green
Write-Host "üìÅ Projeto instalado em: $projectPath" -ForegroundColor White
Write-Host "üîó Atalho criado na √°rea de trabalho" -ForegroundColor White
Write-Host ""
Write-Host "üìã PR√ìXIMOS PASSOS:" -ForegroundColor Yellow
Write-Host "1. Configure o arquivo .env com suas credenciais do Supabase" -ForegroundColor White
Write-Host "2. Clique no atalho 'HabboHub' na √°rea de trabalho" -ForegroundColor White
Write-Host "3. Ou execute: .\start-dev.ps1" -ForegroundColor White
Write-Host ""
Write-Host "üîß SCRIPTS DISPON√çVEIS:" -ForegroundColor Yellow
Write-Host "‚Ä¢ start-dev.ps1 - Iniciar desenvolvimento" -ForegroundColor White
Write-Host "‚Ä¢ sync-to-github.ps1 - Sincronizar com GitHub" -ForegroundColor White
Write-Host "‚Ä¢ pull-from-github.ps1 - Baixar atualiza√ß√µes" -ForegroundColor White
Write-Host "‚Ä¢ build-production.ps1 - Build para produ√ß√£o" -ForegroundColor White
Write-Host ""
Write-Host "üåê O site estar√° dispon√≠vel em: http://localhost:5173" -ForegroundColor Cyan

# Perguntar se quer iniciar agora
$startNow = Read-Host "Deseja iniciar o HabboHub agora? (s/n)"
if ($startNow -eq "s" -or $startNow -eq "S" -or $startNow -eq "sim") {
    Write-Host "üöÄ Iniciando HabboHub..." -ForegroundColor Green
    .\start-dev.ps1
} else {
    Write-Host "‚úÖ Configura√ß√£o finalizada! Execute .\start-dev.ps1 quando quiser iniciar." -ForegroundColor Green
}
